SingleFnNF~{
	fn~;
	;~{fn}
}

Boxed~`
        _io.return~{
                el~@_io.0
        }
`

CIter~{
	el~int.8
	
}

WriteNF~{
	~SingleFnNF
	data~_arg:bytes
	s~{
		b~bytes
		;~{
			data:b
			;
		}
	}
	c~{
		in~int
		;~{
			b~int.8
			b:in
			data:@b
			data.count:1
			;
		}
	}
	
	endl~{
		;~{
			_endl
		}
	}
	line~{
		b~bytes
		;~{
			s:b
			endl
		}
	}
	d~{
		in~int
		;~{
			buff~bytes.48
			it~@CIter:@buff
			it:{it+40}
			it.el:{in%10+48}
			in:{in/10}
			it:{it-1}
			size~int:1
			
			{in > 0}?*{
				it.el:{in%10+48}
				in:{in/10}
				it:{it-1}
				size:{size+1}
			}
			data:{it+1}
			data.count:size
			;
		}
	}
}

print~{
	~WriteNF
	fn:@{
		_system.consoleWrite:data
	}
}

virtual~`
        _io_data~_io.0.;
        _io.0.;~{_io_data}
        
        _io.return~_io_data
`

BaseListNF~`_io.return~{
        get~{at~int ;~{@_io.0}}
        getFn~virtual:get
        each~{f~_io.0.;}
        eachFn~virtual:each
}`

ListNF~`_io.return~{
        ~BaseListNF:_io.0
	b~bytes
	set~{
		at~int
		el~@_io.0
		;~{
			it~@Boxed:_io.0:{b+{at*8}}
			it.el:el
		}
	}
	add~{in~@_io.0}
	addFn~virtual:add
	count~{
		;~{
			b.count
		}
	}
}`

std_list_implm~`
        getFn:@{
		it~@Boxed:_io.0:{b+{at*8}}
		it.el
	}
	eachFn:@{
		it~@Boxed:_io.0:b
		remaining~int
		remaining:b.count
		{remaining > 0}?*{
			mbr~@_io.0:it.el
			mbr.{f}
			it:{it+8}
			remaining:{remaining-1}
		}
	}
`

BufferList~`_io.return~{
        ~ListNF:_io.0
	std_list_implm:_io.0
        addFn:@{
	        set.{at:b.count el:in ;}
		b.count:{b.count + 1}
	}
	setBuffer~{
		in~bytes
		;~{
			b:in
			b.count:0
		}
	}
}`

StringNF~{
	b~bytes
	count~{
		;~{
			b.count
		}
	}
	get~{
		at~int
		;~{
			it~@CIter:{b+at}
			it.el % 256
		}
	}
	set~{
		at~int
		el~int
		;~{
			it~@CIter:{b+at}
			it.el:el
		}
	}
	clear~{;~{ b.count:0 }}
}

memCpy~{from~bytes to~bytes ;~{
        fromPtr~@CIter:from
        toPtr~@CIter:to
        num~int:from.count
        {num > 0}?*{
                toPtr.el:fromPtr.el
                fromPtr:{fromPtr+1}
                toPtr:{toPtr+1}
                num:{num-1}
        }
}}

BufferString~{
        ~StringNF
	setBuffer~{
	        in~bytes
	        ;~{
	                b:in
	                b.count:0
	        }
	}
	write~{
	        ~WriteNF
	        fn:@{
	                memCpy.{to:{b+b.count} from:data ;}
	                b.count:{b.count + data.count}
	        }
	}
}

Enum~{
	val~int
	op~{
		op_val~int
		is~{
			;~{val=op_val}
		}
		set~{
			;~{val:op_val}
		}
	}
}

MasterListNF~`_io.return~{
        ~BaseListNF:_io.0
        b~bytes
        _count~int
	emplace~{f~_io.0.;}
	emplaceFn~virtual:emplace
}`

MasterBufferList~`_io.return~{
        ~MasterListNF:_io.0
        eachFn:@{
	        ptr~@_io.0:b
                for.{
                        end:_count
                        do:@{
                                ptr.{f}
                                ptr:{ptr+_mem_size_of:_io.0}
                        } ;
                }
        }
        getFn:@{b+{at*_mem_size_of:_io.0}}
        emplaceFn:@{
                ptr~@_io.0:{b+b.count}
		ptr.{_init f}
		b.count:{b.count+_mem_size_of:_io.0}
		_count:{_count+1}
        }
        setBuffer~{
		buf~bytes
		;~{
		        _count:0
			b:buf
			b.count:0
		}
	}
}`

getChar~{
        ;~{
                c~int.8
                _system.consoleRead.{a:@c size:1 ;}
                
                result~int:0
                result
                c
        }
}

for~{
        i~int:0
        end~int
        step~int:1
        do~;
        ;~{
                {i < end}?*{
                        do
                        i:{i+step}
                }
        }
}

File~{
        name~BufferString
        fd~int
        open~{;~{
                c_str_buffer~bytes.20
                fd:_system.fileOpen:BufferString.{setBuffer:@c_str_buffer write.{s:name c:0} $}
        }}
        close~{;~{
                _system.fileClose:fd
        }}
        write~{
                ~WriteNF
                fn:@{_system.fileWrite.{$.fd:fd a:data ;}}
        }
}

BoxedInt~{el~int}

