SingleFnNF~{
	fn~;
	;~{fn}
}

Boxed~`
        _io.return~{
                el~@_io.0
        }
`

CIter~{
	el~int.8
	
}

WriteNF~{
	~SingleFnNF
	data~inset:bytes
	s~{
		b~bytes
		;~{
			data:b
			;
		}
	}
	c~{
		in~int
		;~{
			b~int.8
			b:in
			data:@b
			data.count:1
			;
		}
	}
	
	endl~{
		;~{
			_endl
		}
	}
	line~{
		b~bytes
		;~{
			s:b
			endl
		}
	}
	d~{
		in~int
		;~{
			buff~bytes.48
			it~@CIter:@buff
			it:{it+40}
			it.el:{in%10+48}
			in:{in/10}
			it:{it-1}
			size~int:1
			
			{in > 0}?*{
				it.el:{in%10+48}
				in:{in/10}
				it:{it-1}
				size:{size+1}
			}
			data:{it+1}
			data.count:size
			;
		}
	}
}

print~{
	~WriteNF
	fn:@{
		_console_write:data
	}
}
List~template:`_io.return~{
	b~bytes
	setBuffer~{
		in~bytes
		;~{
			b:in
			b.count:0
		}
	}
	get~{
		at~int
		;~{
			it~@Boxed:_io.0:{b+{at*8}}
			it.el
		}
	}
	set~{
		at~int
		char~@_io.0
		;~{
			it~@Boxed:_io.0:{b+{at*8}}
			it.el:char
		}
	}
	add~{
		in~@_io.0
		;~{
			set.{at:b.count char:in ;}
			b.count:{b.count + 1}
		}
	}
	count~{
		;~{
			b.count
		}
	}
	each~{
		
		f~_io.0.;
		;~{
			it~@Boxed:_io.0:b
			
			remaining~int
			remaining:b.count
			
			{remaining > 0}?*{
				mbr~@_io.0:it.el
				mbr.{f}
				
				
				it:{it+8}
				remaining:{remaining-1}
			}
		}
	}
}`









String~{
	b~bytes
	setBuffer~{
		in~bytes
		;~{
			b:in
			b.count:0
		}
	}
	set~{
		at~int
		el~int
		;~{
			it~@CIter:{b+at}
			it.el:el
		}
	}
	get~{
		at~int
		;~{
			it~@CIter:{b+at}
			it.el % 256
		}
	}
	count~{
		;~{
			b.count
		}
	}
	write~{
		~WriteNF
		fn:@{
			in~@CIter:data
			self~@CIter:b
			self:{self+b.count}
			countin~int:data.count
			b.count:{b.count+countin}
			{countin > 0}?*{
				self.el:in.el
				self:{self+1}
				
				in:{in+1}
				countin:{countin-1}
			}
		}
	}
}

Enum~{
	val~int
	op~{
		op_val~int
		is~{
			;~{val=op_val}
		}
		set~{
			;~{val:op_val}
		}
	}
}

MasterList~template:`_io.return~{
	~List:_io.0
	membSize~int
	membBuffer~bytes
	setMembBuffer~{
		buf~bytes
		;~{
			membBuffer:buf
			membBuffer.count:0
		}
	}
	emplace~{
		in~_io.0.;
		;~{
			ptr~@_io.0:{membBuffer+membBuffer.count}
			ptr.{in}
			membBuffer.count:{membBuffer.count+membSize}
			add:ptr
		}
	}
}`

virtual~`
        _io_data~_io.0.;
        _io.0.;~{_io_data}
        
        _io.return~_io_data
`
getChar~{
        ;~{
                c~int.8
                _console_read.{a:@c size:1 ;}
                
                result~int:0
                result
                c
        }
}

Counter~{
        start~int:0
        end~int
        step~int:1
        i~int
        do~;
        ;~{
                i:start
                {i < end}?*{
                        do
                        i:{i+step}
                }
        }
}

File~{
        name~String
        fd~int
        open~{;~{
                c_str_buffer~bytes.20
                fd:_file_open:String.{setBuffer:@c_str_buffer write.{s:name c:0} $}
        }}
        close~{;~{
                _file_close:fd
        }}
        write~{
                ~WriteNF
                fn:@{_file_write.{$.fd:fd a:data ;}}
        }
}

