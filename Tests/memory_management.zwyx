#Test for memory management


_import:"utilities_lib"

BoxedInt~{el~int}

MemManagerNF~{
        alloc~{numBytes~int}
        free~{chunk~bytes}
        allocFn~virtual:alloc
        freeFn~virtual:free
}

memCpy~{from~bytes to~bytes ;~{
        fromPtr~@CIter:from
        toPtr~@CIter:to
        num~int:from.count
        {num > 0}?*{
                toPtr.el:fromPtr.el
                fromPtr:{fromPtr+1}
                toPtr:{toPtr+1}
                num:{num-1}
        }
}}

intCast~{in~bytes ;~{
        result~int:in
        result
}}

MemArena~{
        ~MemManagerNF
        data~bytes
        firstOpenChunk~@BoxedInt
        allocFn:@{
                {numBytes % 8}?{
                        numBytes:{numBytes / 8 * 8 + 8}
                }
                chunkSize~int:0
                chunkPtr~@BoxedInt:firstOpenChunk
                nextChunkPtr~@BoxedInt:chunkPtr
                {{chunkSize < numBytes} & {chunkPtr.el < 0xFFFF}}?*{
                        {nextChunkPtr.el & 0x8000}?{
                                chunkSize:0
                                chunkPtr:nextChunkPtr
                        }^{
                                {chunkSize > 0}?{
                                        chunkSize:{chunkSize + 8 + nextChunkPtr.el}
                                        chunkPtr.el:chunkSize
                                }^{
                                        chunkPtr:nextChunkPtr
                                        chunkSize:chunkPtr.el
                                }
                        }
                        nextChunkPtr:{nextChunkPtr+8+{nextChunkPtr.el & 0x7FFF}}
                }
                {chunkPtr.el = 0xFFFF}?{0}^{
                        {chunkSize > numBytes}?{
                                nextChunkPtr:{chunkPtr + 8 + numBytes}
                                nextChunkPtr.el:{chunkSize - numBytes - 8}
                                {chunkPtr = intCast:firstOpenChunk}?{
                                        firstOpenChunk:nextChunkPtr
                                }
                        }
                        chunkPtr.el:{numBytes | 0x8000}
                        chunkPtr+8
                }
        }
        freeFn:@{
                chunkPtr~@BoxedInt:{chunk-8}
                chunkPtr.el:{chunkPtr.el & 0x7FFF}
                {chunkPtr < intCast:firstOpenChunk}?{
                        firstOpenChunk:chunkPtr
                }
        }
        set~{b~bytes ;~{
                data:b
                
                chunkPtr~@BoxedInt:data
                firstOpenChunk:data
                
                chunkPtr.el:{data.count-16}
                
                chunkPtr:{chunkPtr + 8}
                for.{i:8 step:8 end:{data.count-8} do:@{
                        chunkPtr.el:0
                        chunkPtr:{chunkPtr+8}
                } ; }
                
                chunkPtr.el:0xFFFF
        }}
}

DynString~{
        b~bytes
        capacity~int:0
        memHandler~@MemManagerNF
        write~{
		~WriteNF
		fn:@{
		        countin~int:data.count
		        failed~int:0
		        
		        {{b.count+countin} > capacity}?{
		                free_b~int:1
		                {capacity = 0}?{
		                        capacity:16
		                        free_b:0
		                        
		                        b.count:0
		                }
		                {{b.count+countin} > capacity}?*{
		                        capacity:{capacity*2}
		                }
		                new_b~bytes:memHandler.alloc:capacity
		                {new_b = 0}?{
		                        failed:1
		                }^{
		                        new_b.count:b.count
		                        memCpy.{to:new_b from:b ;}
		                        {free_b}?{
		                                memHandler.free:b
		                        }
		                        b:new_b
		                }
		        }
		        {failed = 0}?{
			        memCpy.{to:{b+b.count} from:data ;}
			        b.count:{b.count+countin}
			}
		}
	}
	clear~{;~{ b.count:0 }}
	destroy~{;~{
	       clear
	       capacity:0
	       
	       memHandler.free:b
	}}
}

;~{
        heap~bytes.{
                $:_heap_map:4096
                count:4096
        }
        mem~MemArena.{set:heap}
        
        str1~DynString.{memHandler:@mem write:"Hello, World!"}
        str2~DynString.{memHandler:@mem write:"Chunk of some data!"}
        print.line:str1
        print.line:str2
        
        str1.write:" Yes, we meet again!"
        str2.write:" Bigger chunk of some data!"
        print.line:str1
        print.line:str2
        
        str1.{destroy write:"Test for finding open chunks."}
        print.line:str1
        
        buffPtr~@BoxedInt:heap
        for.{end:400 do:@{
                print.{d:{buffPtr.el % 256} s:" "}
                buffPtr:{buffPtr+1}
        } ; }
        print.endl
        
        str1.write:" This will go to the next chunk."
        print.line:str1
        
        str3~DynString.{memHandler:@mem write:"Filler Filler Filler Filler Filler Filler Filler"}
        str4~DynString.{memHandler:@mem write:"More Filler More Filler More Filler More Filler More Filler"}
        
        buffPtr:heap
        for.{end:400 do:@{
                print.{d:{buffPtr.el % 256} s:" "}
                buffPtr:{buffPtr+1}
        } ; }
        print.endl
}

