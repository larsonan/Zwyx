#Test for memory management


_import:"utilities_lib"

BoxedInt~{el~int}

MemArena~{
        data~bytes
        alloc~{numBytes~int ;~{
                chunkPtr~@BoxedInt:data
                {chunkPtr.el}?*{
                        chunkPtr:{chunkPtr+8+chunkPtr.el}
                }
                {{numBytes % 8} = 0}?{
                        chunkPtr.el:numBytes
                }^{
                        chunkPtr.el:{numBytes/8*8+8}
                }
                chunkPtr+8
        }}
}

DynString~{
        b~bytes
        capacity~int:0
        memMan~@MemArena
        write~{
		~WriteNF
		fn:@{
		        countin~int:data.count
		        {capacity = 0}?{
		                b:memMan.alloc:16
		                b.count:0
		                capacity:16
		        }^{{b.count+countin} > capacity}?{
		                {{b.count+countin} > capacity}?*{
		                        capacity:{capacity*2}
		                }
		                new_b~bytes:memMan.alloc:capacity
		                new_b.count:b.count
		                newPtr~@CIter:new_b
		                oldPtr~@CIter:b
		                bytesLeft~int:b.count
		                {bytesLeft > 0}?*{
		                        newPtr.el:oldPtr.el
		                        newPtr:{newPtr+1}
		                        oldPtr:{oldPtr+1}
		                        bytesLeft:{bytesLeft-1}
		                }
		                b:new_b
		        }
			in~@CIter:data
			self~@CIter:b
			self:{self+b.count}
			b.count:{b.count+countin}
			{countin > 0}?*{
				self.el:in.el
				self:{self+1}
				
				in:{in+1}
				countin:{countin-1}
			}
		}
	}
}

buff~bytes.104

;~{
        buffPtr~@BoxedInt:@buff
        for.{end:104 step:8 do:@{
                buffPtr.el:0
                buffPtr:{buffPtr+8}
        } ; }
        mem~MemArena.{data:@buff}
        str~DynString.{memMan:@mem write:"Hello, World!"}
        
        buffPtr:@buff
        for.{end:104 do:@{
                print.{d:{buffPtr.el % 256} s:" "}
                buffPtr:{buffPtr+1}
        } ; }
        print.endl
        print.line:str
        
        str.write:" Yes, we meet again!"
        
        buffPtr:@buff
        for.{end:104 do:@{
                print.{d:{buffPtr.el % 256} s:" "}
                buffPtr:{buffPtr+1}
        } ; }
        print.endl
        print.line:str
}

